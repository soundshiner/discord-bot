#!/usr/bin/env node

// ========================================
// scripts/security-check.js
// V√©rifications de s√©curit√© pour le d√©ploiement
// ========================================

import { execSync } from "child_process";
import fs from "fs";
import path from "path";

console.log("üîí V√©rifications de s√©curit√©...\n");

let hasErrors = false;

// 1. V√©rifier que l'utilisateur n'est pas root
function checkUser() {
  try {
    const user = process.env.USER || process.env.USERNAME;
    const uid = process.getuid ? process.getuid() : null;

    console.log(`üë§ Utilisateur actuel: ${user} (UID: ${uid})`);

    if (uid === 0) {
      console.error(
        "‚ùå ERREUR: Vous ne devez PAS ex√©cuter ce bot en tant que root !"
      );
      console.error("   Cr√©ez un utilisateur d√©di√©:");
      console.error("   sudo adduser soundshine");
      console.error("   sudo usermod -aG docker soundshine");
      console.error("   sudo su - soundshine");
      hasErrors = true;
      return false;
    }

    if (user === "root" || user === "administrator") {
      console.error("‚ùå ERREUR: Utilisateur syst√®me d√©tect√© !");
      console.error("   Utilisez un utilisateur d√©di√© pour le bot.");
      hasErrors = true;
      return false;
    }

    console.log("‚úÖ Utilisateur non-root d√©tect√©");
    return true;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la v√©rification utilisateur:",
      error.message
    );
    hasErrors = true;
    return false;
  }
}

// 2. V√©rifier les permissions des fichiers sensibles
function checkFilePermissions() {
  const sensitiveFiles = [".env", "config.json", "data/", "logs/"];

  console.log("\nüìÅ V√©rification des permissions des fichiers...");

  for (const file of sensitiveFiles) {
    if (fs.existsSync(file)) {
      try {
        const stats = fs.statSync(file);
        const mode = stats.mode.toString(8);

        // V√©rifier que les fichiers ne sont pas trop permissifs
        if (mode.endsWith("777") || mode.endsWith("666")) {
          console.warn(`‚ö†Ô∏è  Fichier trop permissif: ${file} (${mode})`);
          console.warn(`   Recommand√©: chmod 600 ${file}`);
        } else {
          console.log(`‚úÖ ${file} - Permissions OK (${mode})`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lecture ${file}:`, error.message);
      }
    }
  }
}

// 3. V√©rifier la pr√©sence de Docker
function checkDocker() {
  try {
    console.log("\nüê≥ V√©rification de Docker...");

    // V√©rifier si Docker est install√©
    execSync("docker --version", { stdio: "pipe" });
    console.log("‚úÖ Docker install√©");

    // V√©rifier si l'utilisateur est dans le groupe docker
    try {
      execSync("docker ps", { stdio: "pipe" });
      console.log("‚úÖ Utilisateur dans le groupe docker");
    } catch (error) {
      console.warn("‚ö†Ô∏è  Utilisateur pas dans le groupe docker");
      console.warn(
        "   Ajoutez l'utilisateur au groupe: sudo usermod -aG docker $USER"
      );
      console.warn("   Puis reconnectez-vous ou ex√©cutez: newgrp docker");
    }
  } catch (error) {
    console.error("‚ùå Docker non install√© ou non accessible");
    console.error("   Installez Docker: https://docs.docker.com/get-docker/");
    hasErrors = true;
  }
}

// 4. V√©rifier les variables d'environnement
function checkEnvironment() {
  console.log("\nüåç V√©rification des variables d'environnement...");

  const requiredVars = ["BOT_TOKEN", "CLIENT_ID", "API_TOKEN"];

  const missing = [];

  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      missing.push(varName);
    } else {
      console.log(`‚úÖ ${varName} configur√©`);
    }
  }

  if (missing.length > 0) {
    console.warn(`‚ö†Ô∏è  Variables manquantes: ${missing.join(", ")}`);
    console.warn("   Cr√©ez un fichier .env avec ces variables");
  }
}

// 5. V√©rifier la structure du projet
function checkProjectStructure() {
  console.log("\nüìÇ V√©rification de la structure du projet...");

  const requiredDirs = ["commands", "events", "utils", "api"];

  for (const dir of requiredDirs) {
    if (fs.existsSync(dir)) {
      console.log(`‚úÖ ${dir}/ existe`);
    } else {
      console.error(`‚ùå ${dir}/ manquant`);
      hasErrors = true;
    }
  }
}

// 6. Recommandations de s√©curit√©
function showSecurityRecommendations() {
  console.log("\nüîê Recommandations de s√©curit√©:");
  console.log("   1. Utilisez un utilisateur d√©di√© (ex: soundshine)");
  console.log("   2. Limitez les permissions des fichiers sensibles");
  console.log("   3. Utilisez des secrets pour les tokens");
  console.log("   4. Activez le firewall (ufw/iptables)");
  console.log("   5. Mettez √† jour r√©guli√®rement le syst√®me");
  console.log("   6. Surveillez les logs pour d√©tecter les intrusions");
  console.log("   7. Faites des sauvegardes r√©guli√®res");
}

// Ex√©cution des v√©rifications
function main() {
  console.log("üöÄ soundSHINE Bot - V√©rifications de s√©curit√©\n");

  checkUser();
  checkFilePermissions();
  checkDocker();
  checkEnvironment();
  checkProjectStructure();
  showSecurityRecommendations();

  console.log("\n" + "=".repeat(50));

  if (hasErrors) {
    console.error(
      "‚ùå V√©rifications √©chou√©es ! Corrigez les erreurs avant de continuer."
    );
    process.exit(1);
  } else {
    console.log("‚úÖ Toutes les v√©rifications de s√©curit√© sont pass√©es !");
    console.log("   Vous pouvez maintenant d√©marrer le bot en toute s√©curit√©.");
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as securityCheck };
