// ========================================
// index.js (ESM) - Point d'entr√©e principal optimis√©
// ========================================

import "dotenv/config";
import { startBot, stopBot } from "./bot/startup.js";
import { registerProcessHandlers } from "./core/lifecycle.js";
import WebServer from "./api/index.js";
import logger from "./bot/logger.js";
import { getGlobalConfig } from "./utils/globalConfig/globalConfig.js";
import { disconnectDatabase } from "./utils/database/database.js";
import appState from "./core/services/AppState.js";
import { retryDiscord, retry } from "./utils/core/retry.js";

// Configuration globale avec validation
let config;
try {
  config = getGlobalConfig();
  logger.info(`Configuration charg√©e pour l'environnement: ${config.NODE_ENV}`);

  // Initialiser l'√©tat global
  appState.initialize();
  appState.setConfigLoaded(config);
} catch (error) {
  logger.error(
    "Erreur critique lors du chargement de la configuration:",
    error
  );
  process.exit(1);
}

// Variables globales pour la gestion du cycle de vie
let botClient = null;
let apiServer = null;
let isShuttingDown = false;

// Fonction de fermeture gracieuse
async function gracefulShutdown(signal) {
  if (isShuttingDown) {
    logger.warn("Fermeture d√©j√† en cours, ignor√©");
    return;
  }

  isShuttingDown = true;
  logger.warn(`Signal ${signal} re√ßu. Fermeture gracieuse en cours...`);

  try {
    // Arr√™ter le serveur API
    if (apiServer) {
      logger.info("Arr√™t du serveur API...");
      await apiServer.stop();
      appState.setApiRunning(false);
      logger.success("Serveur API arr√™t√©");
    }

    // Arr√™ter le bot Discord
    if (botClient) {
      logger.info("Arr√™t du bot Discord...");
      await stopBot();
      appState.setBotConnected(false);
      appState.setBotReady(false);
      logger.success("Bot Discord arr√™t√©");
    }

    // Fermer la base de donn√©es
    logger.info("Fermeture de la base de donn√©es...");
    await disconnectDatabase();
    appState.setDatabaseConnected(false);
    appState.setDatabaseHealthy(false);
    logger.success("Base de donn√©es ferm√©e");

    logger.success("Fermeture gracieuse termin√©e");
    process.exit(0);
  } catch (error) {
    logger.error("Erreur lors de la fermeture gracieuse:", error);
    process.exit(1);
  }
}

// Fonction de d√©marrage principale avec retry
async function startApplication() {
  try {
    logger.sectionStart("D√©marrage de soundSHINE Bot");
    logger.info(`Version: ${process.env.npm_package_version || "2.0.0"}`);
    logger.info(`Node.js: ${process.version}`);
    logger.info(`Environnement: ${config.NODE_ENV}`);

    // üöÄ Lancement du bot Discord avec retry
    logger.info("Initialisation du bot Discord...");
    botClient = await retryDiscord(
      async () => {
        const client = await startBot();
        appState.setBotConnected(true);
        appState.setBotReady(true);
        return client;
      },
      {
        onRetry: (error, attempt) => {
          logger.warn(
            `Tentative de connexion Discord ${attempt}: ${error.message}`
          );
        },
      }
    );
    logger.success("Bot Discord d√©marr√© avec succ√®s");

    // üåê Lancement du serveur API avec retry
    logger.info("Initialisation du serveur API...");
    apiServer = new WebServer(botClient, logger);
    await retry(
      async () => {
        apiServer.start(config.api.port);
        appState.setApiRunning(true, config.api.port);
      },
      {
        onRetry: (error, attempt) => {
          logger.warn(
            `Tentative de d√©marrage API ${attempt}: ${error.message}`
          );
        },
      }
    );
    logger.success(`Serveur API d√©marr√© sur le port ${config.api.port}`);

    // üßº Gestion du cycle de vie
    registerProcessHandlers();

    // Enregistrer les gestionnaires de fermeture
    process.on("SIGINT", () => gracefulShutdown("SIGINT"));
    process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

    logger.section("D√©marrage termin√© avec succ√®s");
    logger.info("üìä M√©triques disponibles sur /v1/metrics");
    logger.info("üè• Health check sur /v1/health");
    logger.info("üìù Logs centralis√©s disponibles sur /v1/logs");
    logger.info("üö® Alertes disponibles sur /v1/alerts");

    // Log des informations de performance
    const memUsage = process.memoryUsage();
    logger.info(
      `M√©moire utilis√©e: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`
    );
  } catch (error) {
    logger.error("Erreur critique lors du d√©marrage de l'application:", error);

    // Tentative de nettoyage en cas d'erreur
    try {
      if (botClient) await stopBot();
      if (apiServer) await apiServer.stop();
      await disconnectDatabase();
    } catch (cleanupError) {
      logger.error(
        "Erreur lors du nettoyage apr√®s erreur de d√©marrage:",
        cleanupError
      );
    }

    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on("uncaughtException", async (error) => {
  logger.error("Exception non captur√©e:", error);
  await gracefulShutdown("UNCAUGHT_EXCEPTION");
});

process.on("unhandledRejection", (reason, promise) => {
  logger.error("Promesse rejet√©e non g√©r√©e:", reason);
  // Ne pas arr√™ter l'application pour les promesses rejet√©es
  // mais les logger pour le debugging
});

// D√©marrage de l'application
startApplication().catch((error) => {
  logger.error("Erreur fatale lors du d√©marrage:", error);
  process.exit(1);
});

