// ========================================
// core/services/StageMonitor.js - Surveillance des stages pour dÃ©connexion automatique
// ========================================

import { getVoiceConnection } from '@discordjs/voice';
import logger from '../../bot/logger.js';

class StageMonitor {
  constructor () {
    this.isMonitoring = false;
    this.checkInterval = 30000; // VÃ©rification toutes les 30 secondes
    this.monitoringInterval = null;
    this.connectedStages = new Map(); // guildId -> { channelId, lastCheck }

    logger.info('ðŸŽ­ StageMonitor initialisÃ©');
  }

  /**
   * DÃ©marrer la surveillance des stages
   */
  startMonitoring () {
    if (this.isMonitoring) {
      logger.warn('StageMonitor dÃ©jÃ  en cours de surveillance');
      return;
    }

    this.isMonitoring = true;
    this.monitoringInterval = setInterval(() => {
      this.checkAllStages();
    }, this.checkInterval);

    logger.info('ðŸŽ­ Surveillance des stages dÃ©marrÃ©e');
  }

  /**
   * ArrÃªter la surveillance des stages
   */
  stopMonitoring () {
    if (!this.isMonitoring) {
      return;
    }

    this.isMonitoring = false;
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }

    logger.info('ðŸŽ­ Surveillance des stages arrÃªtÃ©e');
  }

  /**
   * Enregistrer un stage pour surveillance
   */
  registerStage (guildId, channelId) {
    this.connectedStages.set(guildId, {
      channelId,
      lastCheck: Date.now()
    });
    logger.info(`ðŸŽ­ Stage enregistrÃ© pour surveillance: ${guildId} -> ${channelId}`);
  }

  /**
   * DÃ©senregistrer un stage de la surveillance
   */
  unregisterStage (guildId) {
    if (this.connectedStages.has(guildId)) {
      this.connectedStages.delete(guildId);
      logger.info(`ðŸŽ­ Stage dÃ©senregistrÃ© de la surveillance: ${guildId}`);
    }
  }

  /**
   * VÃ©rifier tous les stages connectÃ©s
   */
  async checkAllStages () {
    if (this.connectedStages.size === 0) {
      return;
    }

    logger.debug(`ðŸŽ­ VÃ©rification de ${this.connectedStages.size} stage(s)`);

    for (const [guildId, stageInfo] of this.connectedStages) {
      try {
        await this.checkStage(guildId, stageInfo.channelId);
      } catch (error) {
        logger.error(`Erreur lors de la vÃ©rification du stage ${guildId}:`, error);
      }
    }
  }

  /**
   * VÃ©rifier un stage spÃ©cifique
   */
  async checkStage (guildId, channelId) {
    try {
      const connection = getVoiceConnection(guildId);

      if (!connection) {
        // Le bot n'est plus connectÃ©, nettoyer l'enregistrement
        this.unregisterStage(guildId);
        return;
      }

      // RÃ©cupÃ©rer le canal depuis la connexion
      const channel = connection.joinConfig.channelId;
      if (channel !== channelId) {
        logger.warn(`ðŸŽ­ Canal de connexion diffÃ©rent: attendu ${channelId}, trouvÃ© ${channel}`);
        return;
      }

      // RÃ©cupÃ©rer le guild et le canal
      const { guild } = connection.joinConfig;
      const voiceChannel = guild.channels.cache.get(channelId);

      if (!voiceChannel) {
        logger.warn(`ðŸŽ­ Canal vocal introuvable: ${channelId}`);
        this.unregisterStage(guildId);
        return;
      }

      // Compter les membres dans le canal (excluant les bots)
      const humanMembers = voiceChannel.members.filter(member => !member.user.bot);
      const botMembers = voiceChannel.members.filter(member => member.user.bot);

      logger.debug(`ðŸŽ­ Stage ${channelId}: ${humanMembers.size} humains, ${botMembers.size} bots`);

      // Si seulement des bots sont prÃ©sents, dÃ©connecter
      if (humanMembers.size === 0 && botMembers.size > 0) {
        logger.info(`ðŸŽ­ Aucun humain dans le stage ${voiceChannel.name}, dÃ©connexion du bot`);
        await this.disconnectFromStage(connection, guildId, voiceChannel);
      }
    } catch (error) {
      logger.error(`Erreur lors de la vÃ©rification du stage ${guildId}:`, error);
    }
  }

  /**
   * DÃ©connecter le bot d'un stage
   */
  async disconnectFromStage (connection, guildId, voiceChannel) {
    try {
      // DÃ©truire la connexion
      connection.destroy();

      // Nettoyer l'enregistrement
      this.unregisterStage(guildId);

      logger.info(`ðŸŽ­ Bot dÃ©connectÃ© du stage: ${voiceChannel.name} (${guildId})`);

      // Optionnel: envoyer un message dans un canal de log
      await this.logDisconnection(voiceChannel);
    } catch (error) {
      logger.error(`Erreur lors de la dÃ©connexion du stage ${guildId}:`, error);
    }
  }

  /**
   * Logger la dÃ©connexion (optionnel)
   */
  async logDisconnection (voiceChannel) {
    try {
      // Chercher un canal de log ou d'administration
      const { guild } = voiceChannel;
      const logChannel = guild.channels.cache.find(channel =>
        channel.name.includes('log')
        || channel.name.includes('admin')
        || channel.name.includes('bot'));

      if (logChannel && logChannel.permissionsFor(guild.members.me).has('SendMessages')) {
        await logChannel.send({
          content: 'ðŸŽ­ **DÃ©connexion automatique**\n'
                  + `Le bot s'est dÃ©connectÃ© du stage **${voiceChannel.name}** car aucun utilisateur n'Ã©tait prÃ©sent.`
        });
      }
    } catch (error) {
      logger.error('Erreur lors du log de dÃ©connexion:', error);
    }
  }

  /**
   * GÃ©rer les changements d'Ã©tat vocal (Ã©vÃ©nement Discord)
   */
  handleVoiceStateUpdate (oldState) {
    // Si quelqu'un quitte un stage surveillÃ©, vÃ©rifier immÃ©diatement
    if (oldState.channelId && this.connectedStages.has(oldState.guild.id)) {
      const stageInfo = this.connectedStages.get(oldState.guild.id);
      if (stageInfo.channelId === oldState.channelId) {
        // VÃ©rifier immÃ©diatement aprÃ¨s un changement
        setTimeout(() => {
          this.checkStage(oldState.guild.id, stageInfo.channelId);
        }, 2000); // Attendre 2 secondes pour que l'Ã©tat se stabilise
      }
    }
  }

  /**
   * Obtenir le statut de surveillance
   */
  getStatus () {
    return {
      isMonitoring: this.isMonitoring,
      connectedStages: this.connectedStages.size,
      checkInterval: this.checkInterval
    };
  }
}

// Instance singleton
const stageMonitor = new StageMonitor();

export default stageMonitor;
