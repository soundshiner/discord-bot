# ========================================
# GitHub Actions CI/CD Pipeline
# ========================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [develop]

# Permissions pour √©viter les erreurs d'acc√®s aux ressources
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

env:
  NODE_VERSION: "18"
  DOCKER_IMAGE: soundshine-bot

jobs:
  # Tests et qualit√© du code
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Scan de s√©curit√©
  security-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # D√©ploiement staging
  deploy-staging:
    needs: [test, security-code]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging..."
          # Ici vous pouvez ajouter votre logique de d√©ploiement staging

      - name: Notify Discord - Staging Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: success
          title: "üöÄ D√©ploiement Staging R√©ussi"
          description: "Le bot soundSHINE a √©t√© d√©ploy√© avec succ√®s en staging"

  # D√©ploiement production
  deploy-production:
    needs: [test, security-code]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        run: |
          echo "Deploying to production..."
          # Ici vous pouvez ajouter votre logique de d√©ploiement production

      - name: Notify Discord - Production Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: success
          title: "üéâ D√©ploiement Production R√©ussi"
          description: "Le bot soundSHINE est maintenant en ligne en production !"

  # Notifications g√©n√©rales
  notify:
    runs-on: ubuntu-latest
    needs: [test, security-code, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Discord - Test Results
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: "üß™ R√©sultats des Tests"
          description: |
            ${{ job.status == 'success' && '‚úÖ Tous les tests sont pass√©s !' || '‚ùå Certains tests ont √©chou√©.' }}

  # Notification d'√©chec
  notify-failure:
    runs-on: ubuntu-latest
    needs: [test, security-code, deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Notify Discord - Pipeline Failure
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          title: "üö® √âchec du Pipeline CI/CD"
          description: "Le pipeline de d√©ploiement a √©chou√©"

