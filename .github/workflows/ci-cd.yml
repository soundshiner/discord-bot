# ========================================
# GitHub Actions CI/CD Pipeline
# ========================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [develop]
    types: [opened, synchronize, closed]

# Permissions pour √©viter les erreurs d'acc√®s aux ressources
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

env:
  NODE_VERSION: "20"
  DOCKER_IMAGE: soundshine-bot

jobs:
  # V√©rifier que la PR a √©t√© merg√©e (pour auto-deploy)
  check-merged:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    outputs:
      is-merged: ${{ steps.check.outputs.merged }}
    steps:
      - name: Check if PR was merged
        id: check
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "merged=true" >> $GITHUB_OUTPUT
          else
            echo "merged=false" >> $GITHUB_OUTPUT
          fi

  # Tests et qualit√© du code
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Scan de s√©curit√©
  security-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Auto-merge develop ‚Üí main si tests OK (seulement si PR merg√©e)
  auto-merge:
    needs: [check-merged, test, security-code]
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      needs.check-merged.outputs.is-merged == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge develop to main
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Switch to main branch
          git checkout main
          git pull origin main

          # Merge develop into main
          git merge origin/develop --no-edit

          # Push to main
          git push origin main

          echo "‚úÖ Successfully merged develop to main"

  # D√©ploiement automatique sur main (seulement si PR merg√©e)
  deploy:
    needs: [check-merged, test, security-code, auto-merge]
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      needs.check-merged.outputs.is-merged == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Deploy commands
        run: npm run deploy:prod
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          GUILD_ID: ${{ secrets.GUILD_ID }}

      - name: Notify Discord - Deploy Success
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: success
          title: "üöÄ D√©ploiement Automatique"
          description: |
            ‚úÖ Code merg√© et d√©ploy√© automatiquement !

            **PR:** ${{ github.event.pull_request.title }}
            **Auteur:** ${{ github.event.pull_request.user.login }}
            **Branche:** develop ‚Üí main

  # Notifications g√©n√©rales (pour tous les √©v√©nements)
  notify:
    runs-on: ubuntu-latest
    needs: [test, security-code]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Notify Discord - Test Results
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: "üß™ R√©sultats des Tests"
          description: |
            ${{ job.status == 'success' && '‚úÖ Tous les tests sont pass√©s !' || '‚ùå Certains tests ont √©chou√©.' }}

  # Notification d'√©chec g√©n√©ral
  notify-failure:
    runs-on: ubuntu-latest
    needs: [test, security-code]
    if: failure()
    steps:
      - name: Notify Discord - Pipeline Failure
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          title: "üö® √âchec du Pipeline CI/CD"
          description: "Le pipeline de d√©ploiement a √©chou√©"

  # Notification d'√©chec pour auto-deploy
  notify-deploy-failure:
    needs: [check-merged, test, security-code, auto-merge, deploy]
    if: failure() && github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord - Deploy Failure
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          title: "‚ùå √âchec D√©ploiement Auto"
          description: |
            Le d√©ploiement automatique a √©chou√© !

            **PR:** ${{ github.event.pull_request.title }}
            **Auteur:** ${{ github.event.pull_request.user.login }}

            V√©rifiez les logs GitHub Actions.