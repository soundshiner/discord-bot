name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Permissions pour éviter les erreurs d'accès aux ressources
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pull-requests: read

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Tests et linting
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      DISCORD_TOKEN: test-token
      CLIENT_ID: test-client-id
      API_PORT: 3000
      BOT_TOKEN: test-bot-token
      UNSPLASH_ACCESS_KEY: test-unsplash-key
      STREAM_URL: test-stream-url
      JSON_URL: test-json-url
      ICECAST_HISTORY_URL: test-icecast-url
      ADMIN_ROLE_ID: test-admin-role
      VOICE_CHANNEL_ID: test-voice-channel
      PLAYLIST_CHANNEL_ID: test-playlist-channel
      API_TOKEN: test-api-token
      BOT_ROLE_NAME: soundSHINE
      DEV_GUILD_ID: test-dev-guild

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage
        timeout-minutes: 15

      - name: Check code formatting
        run: npm run format:check

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Sécurité - Scan du code source
  security-code:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on repository
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Build et test de l'image Docker
  build:
    needs: [test, security-code]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Sécurité - Scan de l'image Docker
  security-image:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Déploiement en staging
  deploy-staging:
    needs: [build, security-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Ajoutez ici votre logique de déploiement staging

  # Déploiement en production
  deploy-production:
    needs: [build, security-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Ajoutez ici votre logique de déploiement production

  # Notifications
  notify:
    needs: [test, build, security-code, security-image]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed! Check the logs for details."
          # Ajoutez ici votre logique de notification (Discord, email, etc.)

      - name: Notify on success
        if: success()
        run: |
          echo "Pipeline completed successfully!"
          # Ajoutez ici votre logique de notification de succès
