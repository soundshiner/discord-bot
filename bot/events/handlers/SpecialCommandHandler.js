// ========================================
// bot/events/handlers/SpecialCommandHandler.js - Gestion des commandes sp√©ciales
// ========================================

import logger from '../../logger.js';
import stageMonitor from '../../../core/services/StageMonitor.js';
import stageSpeakerManager from '../../../core/services/StageSpeakerManager.js';

/**
 * G√©rer les commandes sp√©ciales qui n√©cessitent deferReply
 */
export async function handleSpecialCommands (interaction, result, commandName) {
  // Traitement sp√©cial pour la commande play
  if (result.message === 'PLAY_COMMAND') {
    logger.info(`Traitement de la commande ${commandName}`);
    await handlePlayCommand(interaction);
    return;
  }

  // Traitement sp√©cial pour la commande schedule
  if (result.message === 'SCHEDULE_COMMAND') {
    logger.info('Traitement de la commande SCHEDULE_COMMAND');
    await handleScheduleCommand(interaction, result);
  }
}

/**
 * Traiter la commande play
 */
async function handlePlayCommand (interaction) {
  try {
    logger.info('üöÄ D√©but de handlePlayCommand');

    const { voice } = interaction.member;
    const channel = voice && voice.channel;

    logger.info('üì° V√©rification du canal vocal:', {
      hasVoice: !!voice,
      hasChannel: !!channel,
      channelType: channel?.type
    });

    // Import des modules n√©cessaires
    logger.info('üì¶ Import des modules audio...');
    const {
      joinVoiceChannel,
      createAudioPlayer,
      createAudioResource,
      AudioPlayerStatus,
      NoSubscriberBehavior
    } = await import('@discordjs/voice');
    logger.success('Modules audio import√©s avec succ√®s');

    const config = (await import('../../config.js')).default;
    const { STREAM_URL } = config;
    logger.info('üîó URL du stream r√©cup√©r√©e:', STREAM_URL ? 'OK' : 'MANQUANTE');

    logger.info('üîå Connexion au canal vocal...');
    const connection = joinVoiceChannel({
      channelId: channel.id,
      guildId: channel.guild.id,
      adapterCreator: channel.guild.voiceAdapterCreator,
      selfDeaf: false
    });
    logger.success('Connexion √©tablie');

    logger.info('üéµ Cr√©ation du player audio...');
    const player = createAudioPlayer({
      behaviors: {
        noSubscriber: NoSubscriberBehavior.Pause
      }
    });
    logger.success(' Player cr√©√©');

    logger.info('üéº Cr√©ation de la ressource audio...');
    const resource = createAudioResource(STREAM_URL, {
      inlineVolume: true
    });
    logger.success(' Ressource audio cr√©√©e');

    logger.info('‚ñ∂Ô∏è Lancement de la lecture...');
    player.play(resource);
    connection.subscribe(player);
    logger.success(' Lecture lanc√©e');

    interaction.client.audio = { connection, player };
    logger.info('üíæ Audio sauvegard√© dans client.audio');

    // üé≠ Enregistrer le stage pour surveillance automatique
    stageMonitor.registerStage(channel.guild.id, channel.id);
    logger.info('üé≠ Stage enregistr√© pour surveillance automatique');

    // üîÅ S√©curit√© si le stream prend trop de temps
    const timeout = setTimeout(() => {
      logger.warn('‚è∞ Timeout de 5s atteint');
      interaction.editReply('‚ö†Ô∏è Aucun son d√©tect√© apr√®s 5s. Lecture √©chou√©e ?');
    }, 5000);

    player.once(AudioPlayerStatus.Playing, async () => {
      logger.info('üéµ √âv√©nement Playing d√©tect√©');
      clearTimeout(timeout);

      // üé§ Tentative d'auto-promotion en speaker
      try {
        const promotionResult = await stageSpeakerManager.promoteToSpeaker(connection, channel);

        if (promotionResult.success) {
          await interaction.editReply('‚ñ∂Ô∏è Stream lanc√© dans le stage channel. üé§ Bot promu en speaker automatiquement.');
          logger.success('üé§ Auto-promotion en speaker r√©ussie');
        } else {
          const missingPerms = stageSpeakerManager.formatMissingPermissions(promotionResult.missingPermissions || []);
          const errorMessage = missingPerms.length > 0
            ? `Permissions manquantes: ${missingPerms.join(', ')}`
            : '';
          await interaction.editReply(
            '‚ñ∂Ô∏è Stream lanc√© dans le stage channel.\n‚ö†Ô∏è Auto-promotion en speaker √©chou√©e: '
            + `${promotionResult.message}\n${errorMessage}`
          );
          logger.warn('üé§ Auto-promotion en speaker √©chou√©e:', promotionResult.message);
        }
      } catch (promotionError) {
        await interaction.editReply(
          '‚ñ∂Ô∏è Stream lanc√© dans le stage channel.\n‚ö†Ô∏è Erreur lors de l\'auto-promotion en speaker.'
        );
        logger.error('üé§ Erreur lors de l\'auto-promotion:', promotionError);
      }

      logger.success(' Message de succ√®s envoy√©');
    });

    player.on('error', async (error) => {
      logger.error('‚ùå Erreur du player:', error);
      clearTimeout(timeout);
      return await interaction.editReply(
        '‚ùå Erreur pendant la lecture du stream.'
      );
    });

    logger.success(' handlePlayCommand termin√© avec succ√®s');
  } catch (error) {
    logger.error('‚ùå Erreur lors du traitement de la commande play:', error);
    // L'interaction est d√©j√† diff√©r√©e par le code principal, donc on utilise editReply
    await interaction.editReply({
      content: '‚ùå Erreur lors de l\'ex√©cution de la commande play.'
    });
  }
}

/**
 * Traiter la commande schedule
 */
async function handleScheduleCommand (interaction, _result) {
  try {
    // Import dynamique de la commande schedule
    const scheduleCommand = await import('../../commands/schedule.js');
    const result = await scheduleCommand.default.execute(interaction);

    // L'interaction est d√©j√† diff√©r√©e par le code principal, donc on utilise editReply
    if (result && result.success) {
      await interaction.editReply({
        content: result.message,
        flags: result.ephemeral !== false ? 64 : 0
      });
    } else {
      await interaction.editReply({
        content: '‚ùå Erreur lors de l\'ex√©cution de la commande schedule.',
        flags: 64
      });
    }
  } catch (error) {
    logger.error('Erreur lors du traitement de la commande schedule:', error);
    await interaction.editReply({
      content: '‚ùå Erreur lors de l\'ex√©cution de la commande schedule.',
      flags: 64
    });
  }
}
