import { SlashCommandBuilder, PermissionFlagsBits } from 'discord.js';
import getSilenceDetector from '../../core/services/SilenceDetector.js';
import logger from '../logger.js';

export default {
  data: new SlashCommandBuilder()
    .setName('silence')
    .setDescription('G√©rer le d√©tecteur de silence')
    .setDMPermission(false)
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addSubcommand((subcommand) =>
      subcommand
        .setName('start')
        .setDescription('D√©marrer la surveillance du silence'))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('stop')
        .setDescription('Arr√™ter la surveillance du silence'))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('status')
        .setDescription('Voir le statut du d√©tecteur de silence'))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('config')
        .setDescription('Configurer le d√©tecteur de silence')
        .addIntegerOption((option) =>
          option
            .setName('threshold')
            .setDescription('Seuil de silence en secondes (d√©faut: 5)')
            .setMinValue(1)
            .setMaxValue(300))
        .addIntegerOption((option) =>
          option
            .setName('interval')
            .setDescription(
              'Intervalle de v√©rification en secondes (d√©faut: 10)'
            )
            .setMinValue(5)
            .setMaxValue(60)))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('add-alert')
        .setDescription('Ajouter un destinataire d\'alerte')
        .addUserOption((option) =>
          option
            .setName('user')
            .setDescription('Utilisateur √† ajouter')
            .setRequired(true)))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('remove-alert')
        .setDescription('Supprimer un destinataire d\'alerte')
        .addUserOption((option) =>
          option
            .setName('user')
            .setDescription('Utilisateur √† supprimer')
            .setRequired(true)))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('test')
        .setDescription('Tester le d√©tecteur de silence')),

  async execute (interaction) {
    try {
      const silenceDetector = getSilenceDetector();
      const subcommand = interaction.options.getSubcommand();

      switch (subcommand) {
      case 'start':
        await this.handleStart(interaction, silenceDetector);
        break;
      case 'stop':
        await this.handleStop(interaction, silenceDetector);
        break;
      case 'status':
        await this.handleStatus(interaction, silenceDetector);
        break;
      case 'config':
        await this.handleConfig(interaction, silenceDetector);
        break;
      case 'add-alert':
        await this.handleAddAlert(interaction, silenceDetector);
        break;
      case 'remove-alert':
        await this.handleRemoveAlert(interaction, silenceDetector);
        break;
      case 'test':
        await this.handleTest(interaction, silenceDetector);
        break;
      default:
        await interaction.reply({
          content: '‚ùå Sous-commande non reconnue',
          ephemeral: true
        });
      }
    } catch (error) {
      logger.error('Erreur dans la commande silence:', error);
      await interaction.reply({
        content:
          '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande',
        ephemeral: true
      });
    }
  },

  async handleStart (interaction, silenceDetector) {
    silenceDetector.startMonitoring();

    const status = silenceDetector.getStatus();
    const embed = {
      color: 0x00ff00,
      title: 'üîá Surveillance du silence d√©marr√©e',
      description: 'Le d√©tecteur de silence est maintenant actif.',
      fields: [
        {
          name: 'Seuil de silence',
          value: `${status.silenceThreshold / 1000}s`,
          inline: true
        },
        {
          name: 'Intervalle de v√©rification',
          value: `${status.checkInterval / 1000}s`,
          inline: true
        },
        {
          name: 'Alertes activ√©es',
          value: status.config.enableAlerts ? '‚úÖ Oui' : '‚ùå Non',
          inline: true
        }
      ],
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleStop (interaction, silenceDetector) {
    silenceDetector.stopMonitoring();

    const embed = {
      color: 0xff0000,
      title: 'üîá Surveillance du silence arr√™t√©e',
      description: 'Le d√©tecteur de silence a √©t√© d√©sactiv√©.',
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleStatus (interaction, silenceDetector) {
    const status = silenceDetector.getStatus();
    const lastActivity = status.lastAudioActivity
      ? new Date(status.lastAudioActivity).toLocaleString('fr-FR')
      : 'Jamais';

    const silenceStart = status.silenceStartTime
      ? new Date(status.silenceStartTime).toLocaleString('fr-FR')
      : 'Aucun';

    const embed = {
      color: status.isMonitoring ? 0x00ff00 : 0xff0000,
      title: 'üîá Statut du d√©tecteur de silence',
      fields: [
        {
          name: '√âtat',
          value: status.isMonitoring ? 'üü¢ Actif' : 'üî¥ Inactif',
          inline: true
        },
        {
          name: 'Seuil de silence',
          value: `${status.silenceThreshold / 1000}s`,
          inline: true
        },
        {
          name: 'Intervalle de v√©rification',
          value: `${status.checkInterval / 1000}s`,
          inline: true
        },
        {
          name: 'Derni√®re activit√© audio',
          value: lastActivity,
          inline: true
        },
        {
          name: 'D√©but du silence',
          value: silenceStart,
          inline: true
        },
        {
          name: 'Alerte envoy√©e',
          value: status.alertSent ? '‚úÖ Oui' : '‚ùå Non',
          inline: true
        },
        {
          name: 'Destinataires d\'alerte',
          value:
            status.alertRecipients.length > 0
              ? status.alertRecipients.join(', ')
              : 'Aucun',
          inline: false
        },
        {
          name: 'Configuration',
          value:
            `Alertes: ${
              status.config.enableAlerts ? 'Activ√©es' : 'D√©sactiv√©es'
            }\n`
            + `Canal d'alerte: ${
              status.config.alertChannelId || 'Non configur√©'
            }\n`
            + `Admin: ${status.config.adminUserId || 'Non configur√©'}`,
          inline: false
        }
      ],
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleConfig (interaction, silenceDetector) {
    const threshold = interaction.options.getInteger('threshold');
    const interval = interaction.options.getInteger('interval');

    if (threshold) {
      silenceDetector.updateConfig({ silenceThreshold: threshold * 1000 });
    }

    if (interval) {
      silenceDetector.updateConfig({ checkInterval: interval * 1000 });
    }

    const status = silenceDetector.getStatus();
    const embed = {
      color: 0x0099ff,
      title: '‚öôÔ∏è Configuration mise √† jour',
      description:
        'La configuration du d√©tecteur de silence a √©t√© mise √† jour.',
      fields: [
        {
          name: 'Seuil de silence',
          value: `${status.silenceThreshold / 1000}s`,
          inline: true
        },
        {
          name: 'Intervalle de v√©rification',
          value: `${status.checkInterval / 1000}s`,
          inline: true
        }
      ],
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleAddAlert (interaction, silenceDetector) {
    const user = interaction.options.getUser('user');

    silenceDetector.addAlertRecipient(user.id);

    const embed = {
      color: 0x00ff00,
      title: '‚úÖ Destinataire ajout√©',
      description: `${user.tag} a √©t√© ajout√© aux destinataires d'alerte.`,
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleRemoveAlert (interaction, silenceDetector) {
    const user = interaction.options.getUser('user');

    silenceDetector.removeAlertRecipient(user.id);

    const embed = {
      color: 0xff0000,
      title: '‚ùå Destinataire supprim√©',
      description: `${user.tag} a √©t√© supprim√© des destinataires d'alerte.`,
      timestamp: new Date().toISOString()
    };

    await interaction.reply({ embeds: [embed] });
  },

  async handleTest (interaction, silenceDetector) {
    const status = silenceDetector.getStatus();

    if (!status.isMonitoring) {
      await interaction.reply({
        content:
          '‚ùå Le d√©tecteur de silence n\'est pas actif. Utilisez `/silence start` pour le d√©marrer.',
        ephemeral: true
      });
      return;
    }

    // Simuler une alerte de test
    const testMessage
      = 'üß™ **TEST D\'ALERTE**\n\n'
      + 'Ceci est un test du syst√®me d\'alerte de silence.\n'
      + `‚è∞ Test effectu√© √†: ${new Date().toLocaleString('fr-FR')}\n`
      + '‚úÖ Le syst√®me fonctionne correctement.';

    try {
      const client = await silenceDetector.getDiscordClient();
      if (client) {
        await silenceDetector.sendDirectMessage(client, testMessage);

        const embed = {
          color: 0x00ff00,
          title: 'üß™ Test d\'alerte envoy√©',
          description:
            'L\'alerte de test a √©t√© envoy√©e aux destinataires configur√©s.',
          timestamp: new Date().toISOString()
        };

        await interaction.reply({ embeds: [embed] });
      } else {
        await interaction.reply({
          content:
            '‚ùå Impossible d\'envoyer le test - Client Discord non disponible',
          ephemeral: true
        });
      }
    } catch (error) {
      logger.error('Erreur lors du test d\'alerte:', error);
      await interaction.reply({
        content: '‚ùå Erreur lors de l\'envoi du test d\'alerte',
        ephemeral: true
      });
    }
  }
};
